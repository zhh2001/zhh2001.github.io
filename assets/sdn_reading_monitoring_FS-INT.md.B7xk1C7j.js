import{_ as i,c as s,o as e,ag as l}from"./chunks/framework.BZemHgQ6.js";const t="/reading/FS-INT/INT_example.png",n="/reading/FS-INT/rate-based_sampling_strategy.png",h="/reading/FS-INT/event-based_sampling_strategy.png",r="/reading/FS-INT/Example_for_FS-INT.png",p="/reading/FS-INT/Effect_of_path_length_on_per-packet_overhead.png",m=JSON.parse('{"title":"Flexible sampling-based in-band network telemetry in programmable data plane","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"sdn/reading/monitoring/FS-INT.md","filePath":"sdn/reading/monitoring/FS-INT.md"}'),d={name:"sdn/reading/monitoring/FS-INT.md"};function k(o,a,E,g,F,b){return e(),s("div",null,a[0]||(a[0]=[l('<h1 id="flexible-sampling-based-in-band-network-telemetry-in-programmable-data-plane" tabindex="-1">Flexible sampling-based in-band network telemetry in programmable data plane <a class="header-anchor" href="#flexible-sampling-based-in-band-network-telemetry-in-programmable-data-plane" aria-label="Permalink to &quot;Flexible sampling-based in-band network telemetry in programmable data plane&quot;">​</a></h1><blockquote><p>发表期刊：ICT Express<br> 发表时间：March 2020<br> DOI：10.1016/j.icte.2019.08.005</p></blockquote><p>这篇论文主要研究在 P4 可编程数据平面上，如何通过灵活采样机制改进带内网络遥测（INT，In-band Network Telemetry）的效率，减少带宽和计算开销，同时保持监控准确性。</p><h2 id="_1-研究背景与动机" tabindex="-1">1 研究背景与动机 <a class="header-anchor" href="#_1-研究背景与动机" aria-label="Permalink to &quot;1 研究背景与动机&quot;">​</a></h2><h3 id="_1-1-网络可编程性与遥测需求" tabindex="-1">1.1 网络可编程性与遥测需求 <a class="header-anchor" href="#_1-1-网络可编程性与遥测需求" aria-label="Permalink to &quot;1.1 网络可编程性与遥测需求&quot;">​</a></h3><ul><li>SDN 通过将控制平面与数据平面分离，提高了网络灵活性。</li><li>然而，OpenFlow 等早期标准存在协议限制，难以处理新协议或用户自定义报文头。</li><li>为此，P4 语言应运而生，提供协议无关的编程能力，尤其适用于实现 INT。</li></ul><h3 id="_1-2-int-的局限性" tabindex="-1">1.2 INT 的局限性 <a class="header-anchor" href="#_1-2-int-的局限性" aria-label="Permalink to &quot;1.2 INT 的局限性&quot;">​</a></h3><p>当前 INT 机制需在所有数据包中插入遥测头部（INT header）和交换机内部状态信息（如队列长度、时延等），导致：</p><ul><li>监控引擎（运行在普通服务器上）处理压力过大；</li><li>数据包头部冗长，浪费带宽；</li><li>对小数据包尤其不利，开销相对更高。</li></ul><h2 id="_2-int-架构概述" tabindex="-1">2 INT 架构概述 <a class="header-anchor" href="#_2-int-架构概述" aria-label="Permalink to &quot;2 INT 架构概述&quot;">​</a></h2><p>INT 系统分为两个部分：</p><h3 id="_2-1-int-控制平面" tabindex="-1">2.1 INT 控制平面 <a class="header-anchor" href="#_2-1-int-控制平面" aria-label="Permalink to &quot;2.1 INT 控制平面&quot;">​</a></h3><ul><li>利用 P4 编译器将 INT 功能编译进交换芯片；</li><li>使用 P4Runtime API 下发指令，配置各节点为源节点、转发节点或汇聚节点。</li></ul><h3 id="_2-2-int-数据平面" tabindex="-1">2.2 INT 数据平面 <a class="header-anchor" href="#_2-2-int-数据平面" aria-label="Permalink to &quot;2.2 INT 数据平面&quot;">​</a></h3><ul><li>包含源节点、转发节点、汇聚节点；</li><li>源节点插入 INT 头部和初始遥测信息；</li><li>中间每个转发节点追加自己的遥测信息；</li><li>汇聚节点提取遥测信息，送入监控引擎分析。</li></ul><h3 id="_2-3-示例" tabindex="-1">2.3 示例 <a class="header-anchor" href="#_2-3-示例" aria-label="Permalink to &quot;2.3 示例&quot;">​</a></h3><p>H1 → H2 数据流经 SW1（源）→ SW2（中继）→ SW3（汇聚），每个节点插入自身 ID 与跳时延。</p><p align="center"><img width="95%" src="'+t+'" alt="INT operation example."><span><b>Fig. 1. </b>INT operation example.</span></p><h2 id="_3-fs-int-方案" tabindex="-1">3 FS-INT 方案 <a class="header-anchor" href="#_3-fs-int-方案" aria-label="Permalink to &quot;3 FS-INT 方案&quot;">​</a></h2><p>为减少上述开销，作者提出 FS-INT（Flexible Sampling-based INT），即基于灵活采样的 INT，允许不对每一个包都添加 INT 头部和元数据。主要支持两种采样策略：</p><h3 id="_3-1-基于频率的采样-rate-based-sampling" tabindex="-1">3.1 基于频率的采样（Rate-based Sampling） <a class="header-anchor" href="#_3-1-基于频率的采样-rate-based-sampling" aria-label="Permalink to &quot;3.1 基于频率的采样（Rate-based Sampling）&quot;">​</a></h3><ul><li>每隔 R 个包插入一次 INT 头（第 R 个包采样），R 可动态配置。</li><li>减少 INT 元数据插入频率，从而降低带宽和处理负担。</li><li>图示例：R=2，表示每两个包中只有一个会被采样。 <div align="center"><img width="95%" src="'+n+'" alt="Rate-based sampling strategy."><span><b>Fig. 2.</b>(a) Rate-based sampling strategy.</span></div></li></ul><h3 id="_3-2-基于事件的采样-event-based-sampling" tabindex="-1">3.2 基于事件的采样（Event-based Sampling） <a class="header-anchor" href="#_3-2-基于事件的采样-event-based-sampling" aria-label="Permalink to &quot;3.2 基于事件的采样（Event-based Sampling）&quot;">​</a></h3><ul><li>节点判断是否应插入 INT 信息，依据如队列长度是否超阈值等事件触发条件；</li><li>插入行为基于事件发生与否，因此每跳插入的元数据可能不同；</li><li>为标明哪些字段被插入，需添加一个插入位图（Insertion Bitmap）。 <div align="center"><img width="95%" src="'+h+'" alt="Event-based sampling strategy."><span><b>Fig. 2.</b>(b) Event-based sampling strategy.</span></div></li></ul><h3 id="_3-3-示例" tabindex="-1">3.3 示例 <a class="header-anchor" href="#_3-3-示例" aria-label="Permalink to &quot;3.3 示例&quot;">​</a></h3><p align="center"><img width="95%" src="'+r+'" alt="Example for FS-INT."><span><b>Fig. 3. </b>Example for FS-INT.</span></p><p>FS-INT 实现于 P4 数据平面，通过控制平面注入 3 种策略：</p><ol><li>原始 INT（O-INT）</li><li>Rate-based 采样</li><li>Event-based 采样</li></ol><p>控制器根据监控反馈自动选择策略，例如在负载高时切换为 R 较大的 Rate-based 采样以降低开销。</p><h2 id="_4-仿真与评估结果" tabindex="-1">4 仿真与评估结果 <a class="header-anchor" href="#_4-仿真与评估结果" aria-label="Permalink to &quot;4 仿真与评估结果&quot;">​</a></h2><h3 id="_4-1-实验设定" tabindex="-1">4.1 实验设定 <a class="header-anchor" href="#_4-1-实验设定" aria-label="Permalink to &quot;4.1 实验设定&quot;">​</a></h3><ul><li>模拟 300 个数据包，跨越 10–30 跳（Hops）；</li><li>插入的 INT 元数据包括交换机 ID、入口/出口端口 ID、跳延时；</li><li>小包传输场景（UDP over Ethernet，MSS 为 1472 字节）；</li><li>跳延时按对数正态分布模拟，均值 10ms，标准差 50ms。</li></ul><h3 id="_4-2-结果分析" tabindex="-1">4.2 结果分析 <a class="header-anchor" href="#_4-2-结果分析" aria-label="Permalink to &quot;4.2 结果分析&quot;">​</a></h3><h4 id="_4-2-1-协议开销-protocol-overhead" tabindex="-1">4.2.1 协议开销（Protocol Overhead） <a class="header-anchor" href="#_4-2-1-协议开销-protocol-overhead" aria-label="Permalink to &quot;4.2.1 协议开销（Protocol Overhead）&quot;">​</a></h4><p align="center"><img width="70%" src="'+p+`" alt="Effect of path length on per-packet overhead."><span><b>Fig. 4. </b>Effect of path length on per-packet overhead.</span></p><ul><li>原始 INT 的开销随跳数线性增长；</li><li>FS-INT(R) 和 FS-INT(E) 显著减少开销；</li><li>FS-INT(R) 的开销随 R 增大而线性减少；</li><li>FS-INT(E) 的开销随阈值 Δ 的增大而降低。</li></ul><h4 id="_4-2-2-监控精度" tabindex="-1">4.2.2 监控精度 <a class="header-anchor" href="#_4-2-2-监控精度" aria-label="Permalink to &quot;4.2.2 监控精度&quot;">​</a></h4><p style="margin-bottom:-16px;"><b>Table 1. </b>Average hop latency measurement. </p><table tabindex="0"><thead><tr><th>Path length</th><th>10</th><th>20</th><th>30</th></tr></thead><tbody><tr><td>O-INT</td><td>11.87 ms</td><td>10.7 ms</td><td>10.16 ms</td></tr><tr><td>FS-INT(R) (R = 4)</td><td>10.28 ms</td><td>09.22 ms</td><td>09.15 ms</td></tr><tr><td>FS-INT(E) (∆ = 30 ms)</td><td>11.85 ms</td><td>10.25 ms</td><td>10.03 ms</td></tr></tbody></table><ul><li>以平均跳延时为衡量标准；</li><li>FS-INT(E) 测得的延时更接近原始 INT，比 FS-INT(R) 更准确；</li><li>原因在于 FS-INT(E) 根据延时变化插入信息，误差有界。</li></ul><h2 id="_5-结论" tabindex="-1">5 结论 <a class="header-anchor" href="#_5-结论" aria-label="Permalink to &quot;5 结论&quot;">​</a></h2><ul><li>FS-INT 通过引入可配置采样机制，大幅降低了带内遥测带来的带宽与处理负担；</li><li>在保持良好准确性的同时，提升了可扩展性；</li><li>对未来网络（尤其是高频、低延时的网络场景）具有广泛适用性；</li><li>FS-INT 适合部署于多种可编程网络中，特别是资源受限环境。</li></ul><h2 id="bibtex-格式引用" tabindex="-1">BibTeX 格式引用 <a class="header-anchor" href="#bibtex-格式引用" aria-label="Permalink to &quot;BibTeX 格式引用&quot;">​</a></h2><div class="language-BibTeX vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">BibTeX</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@article</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FSINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Flexible sampling-based in-band network telemetry in programmable data plane</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    journal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ICT Express</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    volume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">62-65</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2020</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    issn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2405-9595</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    doi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://doi.org/10.1016/j.icte.2019.08.005</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://www.sciencedirect.com/science/article/pii/S2405959519302358</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Dongeun Suh and Seokwon Jang and Sol Han and Sangheon Pack and Xiaofei Wang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    keywords</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Programmable data plane, In-band network telemetry, Flexible sampling-based INT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="作为相关工作引用示例" tabindex="-1">作为相关工作引用示例 <a class="header-anchor" href="#作为相关工作引用示例" aria-label="Permalink to &quot;作为相关工作引用示例&quot;">​</a></h2><blockquote><p>带内网络遥测（In-band Network Telemetry, INT）是一种通过将遥测元数据嵌入实际数据包中以获取网络状态的关键机制。然而，传统 INT 方法通常需要对所有数据包附加遥测头部，这在高吞吐或资源受限的环境中会引入显著的带宽和处理开销。为解决这一问题，Suh 等人提出了灵活采样机制的 INT（FS-INT），在遥测流程中引入速率控制与事件触发的采样策略，从而在监控精度与系统负载之间实现可调节的权衡 [1]。具体而言，FS-INT 支持基于固定采样率以及基于网络事件（如队列拥塞）进行元数据选择性插入。仿真结果表明，FS-INT 能在不显著降低测量准确性的前提下，显著减少每个数据包的协议开销，尤其适用于无需全面遥测的小包场景。该设计提升了 INT 在可编程数据面下的可扩展性，适合部署于现代 SDN 架构中。</p></blockquote>`,46)]))}const y=i(d,[["render",k]]);export{m as __pageData,y as default};
