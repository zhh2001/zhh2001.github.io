import{_ as o,c as e,o as l,ag as n,j as i,a}from"./chunks/framework.BZemHgQ6.js";const r="/reading/lint/fig2.gif",s="/reading/lint/fig4.gif",d="/reading/lint/fig7.gif",T="/reading/lint/fig6.gif",p="/reading/lint/fig8.gif",g="/reading/lint/fig10.gif",P=JSON.parse('{"title":"Deterministic and Probabilistic P4-Enabled Lightweight In-Band Network Telemetry","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"sdn/reading/monitoring/lint.md","filePath":"sdn/reading/monitoring/lint.md"}'),h={name:"sdn/reading/monitoring/lint.md"},m={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},u={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.781ex",height:"1.52ex",role:"img",focusable:"false",viewBox:"0 -661 345 672","aria-hidden":"true"},c={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},I={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.043ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 1345 1000","aria-hidden":"true"};function b(w,t,x,N,_,f){return l(),e("div",null,[t[9]||(t[9]=n('<h1 id="deterministic-and-probabilistic-p4-enabled-lightweight-in-band-network-telemetry" tabindex="-1">Deterministic and Probabilistic P4-Enabled Lightweight In-Band Network Telemetry <a class="header-anchor" href="#deterministic-and-probabilistic-p4-enabled-lightweight-in-band-network-telemetry" aria-label="Permalink to &quot;Deterministic and Probabilistic P4-Enabled Lightweight In-Band Network Telemetry&quot;">​</a></h1><blockquote><p>发表期刊：IEEE Transactions on Network and Service Management<br> 发表时间：03 August 2023<br> DOI：10.1109/TNSM.2023.3301839</p></blockquote><h2 id="_1-研究背景与动机" tabindex="-1">1 研究背景与动机 <a class="header-anchor" href="#_1-研究背景与动机" aria-label="Permalink to &quot;1 研究背景与动机&quot;">​</a></h2><p>现代网络需要高精度监控以满足服务质量（QoS）需求。然而，传统 INT 框架（如 P4-INT）虽然能实时记录每跳信息（如 switch ID、队列长度、端口利用率），但会带来线性增长的传输开销，尤其在多跳路径和多指标采集场景中更为明显。这会影响有效载荷（payload）比例、降低吞吐率并延长流完成时间（FCT）。</p><p align="center"><img width="90%" src="'+r+'" alt="Example of path tracing with INT."><span>图 2. 使用 INT 进行路径跟踪的示例</span></p><h2 id="_2-核心贡献" tabindex="-1">2 核心贡献 <a class="header-anchor" href="#_2-核心贡献" aria-label="Permalink to &quot;2 核心贡献&quot;">​</a></h2><p>作者提出两种轻量级 INT 方法：</p><ul><li><strong>DLINT（Deterministic Lightweight INT）</strong>： <ul><li>采用<strong>确定性每流聚合</strong>（per-flow aggregation, PFA）。</li><li>将遥测指标分散在流的多个数据包中，每个包携带一跳信息，通过包序组合完整路径。</li><li>使用 <strong>P4 可编程交换机中的状态管理</strong> 实现无控制器的协作，并借助 <strong>布隆过滤器（Bloom Filter）</strong> 压缩状态表。</li></ul></li><li><strong>PLINT（Probabilistic Lightweight INT）</strong>： <ul><li>利用 <strong>水库抽样（reservoir sampling）</strong> 的概率方式，每个交换机以相等概率插入自身 ID。</li><li>无需交换机间协作，实现更低复杂度。</li><li>头部结构中加入 TTL 信息用于辅助路径重建。</li></ul></li></ul><h2 id="_3-技术设计" tabindex="-1">3 技术设计 <a class="header-anchor" href="#_3-技术设计" aria-label="Permalink to &quot;3 技术设计&quot;">​</a></h2><h3 id="_3-1-dlint-的详细机制" tabindex="-1">3.1 DLINT 的详细机制 <a class="header-anchor" href="#_3-1-dlint-的详细机制" aria-label="Permalink to &quot;3.1 DLINT 的详细机制&quot;">​</a></h3><p><strong>目标：</strong></p><ul><li>精确、连续地获取路径信息。</li><li>在流的生命周期中重复进行路径记录以检测路径变化。</li></ul><p><strong>核心机制：</strong></p><ul><li>交换机维护 3 种遥测状态： <ol><li><code>Awaiting Init</code>：等待初始化信号。</li><li><code>Ready to Insert ID</code>：准备插入 ID。</li><li><code>Inserted ID</code>：已插入 ID，等待重置。</li></ol></li></ul><p><strong>流程示意（5 跳网络）：</strong></p><ol><li>第一个数据包携带 <code>INIT</code> 信号，逐跳激活 <code>Ready to Insert ID</code>。</li><li>接下来每个包轮流携带一个交换机的 ID（按状态插入），直至完整路径形成。</li><li>第 5 个包后，INT sink 发送 <code>RESET</code> 信号（嵌入 TCP ACK），沿反向路径重置各交换机状态。</li><li>重复上述过程，实现持续路径监控。</li></ol><p align="center"><img width="90%" src="'+s+'" alt="Sequence of steps taken by DLINT for path tracing across five switches."><span>图 4. DLINT 跨五台交换机进行路径跟踪的步骤</span></p><p><strong>布隆过滤器用途：</strong></p><ul><li>压缩每个交换机上的状态映射表，以 2 位状态码表示每个流。</li><li>避免寄存器资源耗尽。</li></ul><p><strong>支持多指标：</strong></p><ul><li>可根据 INT 控制器的配置，扩展头部插槽数，携带多个遥测值。</li></ul><h3 id="_3-2-plint-的详细机制" tabindex="-1">3.2 PLINT 的详细机制 <a class="header-anchor" href="#_3-2-plint-的详细机制" aria-label="Permalink to &quot;3.2 PLINT 的详细机制&quot;">​</a></h3><p><strong>核心思想：</strong></p><ul><li>每个交换机以概率方式插入 ID，避免协调开销。</li></ul><p><strong>水库抽样过程：</strong></p>',25)),i("ul",null,[t[7]||(t[7]=i("li",null,"第一个交换机总是插入自身 ID；",-1)),i("li",null,[t[4]||(t[4]=a("第 ")),i("mjx-container",m,[(l(),e("svg",u,t[0]||(t[0]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mi"},[i("path",{"data-c":"1D456",d:"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1)]))),t[1]||(t[1]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"i")])],-1))]),t[5]||(t[5]=a(" 跳交换机以 ")),i("mjx-container",c,[(l(),e("svg",I,t[2]||(t[2]=[n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[3]||(t[3]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mn",null,"1"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mo",null,"/")]),i("mi",null,"i")])],-1))]),t[6]||(t[6]=a(" 概率替换包中的 ID；"))]),t[8]||(t[8]=i("li",null,"使所有节点 ID 有相同概率保留在包中。",-1))]),t[10]||(t[10]=n('<p align="center"><img width="85%" src="'+d+'" alt="Telemetry data delivery with PLINT."><span>图 7. 使用 PLINT 进行遥测数据传输</span></p><p><strong>关键字段：</strong></p><ul><li><code>initTTL</code>：初始 TTL</li><li><code>hopNum</code>：计算当前位置，用于服务器重建路径</li></ul><p align="center"><img width="20%" src="'+T+'" alt="PLINT telemetry header."><span>图 6. PLINT 遥测报头</span></p><p><strong>支持多个指标插入：</strong></p><ul><li>每个 slot 独立进行水库抽样，可能出现多个 slot 值相同（冗余问题）。</li></ul><h2 id="_4-实验评估" tabindex="-1">4 实验评估 <a class="header-anchor" href="#_4-实验评估" aria-label="Permalink to &quot;4 实验评估&quot;">​</a></h2><p><strong>环境：</strong></p><ul><li>使用 BMv2 模拟交换机 + Mininet 拓扑（27 节点）</li><li>使用 D-ITG 生成约 400 条流量（Zipf 分布）</li></ul><h3 id="_4-1-对比指标" tabindex="-1">4.1 对比指标 <a class="header-anchor" href="#_4-1-对比指标" aria-label="Permalink to &quot;4.1 对比指标&quot;">​</a></h3><ol><li><strong>传输开销（Transmission Overhead）</strong><ul><li>DLINT/PLINT：固定开销（例如 1 跳 4 bytes）</li><li>P4-INT：随跳数和指标数线性增长（例如 5 跳 5 值需 116 bytes）</li></ul></li></ol><p align="center"><img width="75%" src="'+p+'" alt="Transmission overhead of P4-INT, PLINT and DLINT with one and five telemetry values."><span>图 8. P4-INT、PLINT 和 DLINT 具有一个和五个遥测值的传输开销</span></p><ol start="2"><li><p><strong>路径追踪效率</strong></p><ul><li>DLINT 整体传递路径数多于 PLINT（尤其布隆过滤器足够大时）</li><li>BF 碰撞会导致路径信息缺失，但可通过后续包弥补</li></ul></li><li><p><strong>INT 报头利用率</strong></p><ul><li>PLINT 利用率高，但因重复 ID 造成信息密度不高</li></ul></li></ol><p align="center"><img width="75%" src="'+g+'" alt="INT header space utilization with a diverse range of telemetry values."><span>图 10. INT 报头利用率</span></p><ol start="4"><li><p><strong>路径更新检测</strong></p><ul><li>PLINT 更快检测路径更新（无状态丢失）</li><li>DLINT 在 BF 冲突下检测率与时效性下降</li></ul></li><li><p><strong>与 PINT 对比</strong></p><ul><li>PLINT 比 PINT 更快检测路径变更（因为携带 hopNum）</li><li>PINT 不携带 hopNum，无法精确定位更新位置</li></ul></li></ol><h2 id="_5-优势与不足对比" tabindex="-1">5 优势与不足对比 <a class="header-anchor" href="#_5-优势与不足对比" aria-label="Permalink to &quot;5 优势与不足对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>DLINT</th><th>PLINT</th></tr></thead><tbody><tr><td>协调需求</td><td>有，靠 BF 状态管理</td><td>无</td></tr><tr><td>路径追踪效率</td><td>高，信息组织良好</td><td>较低，需要更多包来重构路径</td></tr><tr><td>INT 头利用率</td><td>受 INIT/RESET 影响，字段有浪费</td><td>高，但存在重复数据</td></tr><tr><td>更新检测能力</td><td>中，受 BF 冲突影响</td><td>高，响应快</td></tr><tr><td>适用场景</td><td>精确路径追踪、长流量</td><td>快速检测路径变化、大流量统计</td></tr></tbody></table><h2 id="_6-结论与未来方向" tabindex="-1">6 结论与未来方向 <a class="header-anchor" href="#_6-结论与未来方向" aria-label="Permalink to &quot;6 结论与未来方向&quot;">​</a></h2><ul><li><strong>总结</strong>：DLINT 和 PLINT 均能有效降低 INT 的传输负担，并在不同场景下各有优势。</li><li><strong>未来工作</strong>：将两者部署到真实硬件 P4 设备（如 SmartNIC）中，研究在真实环境中的延迟与性能瓶颈。</li></ul>',19))])}const L=o(h,[["render",b]]);export{P as __pageData,L as default};
