import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.BZemHgQ6.js";const c=JSON.parse('{"title":"MySQL 面试题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/mysql.md","filePath":"interview/mysql.md"}'),n={name:"interview/mysql.md"};function l(h,s,r,k,p,d){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="mysql-面试题" tabindex="-1">MySQL 面试题 <a class="header-anchor" href="#mysql-面试题" aria-label="Permalink to &quot;MySQL 面试题&quot;">​</a></h1><h2 id="_1-索引" tabindex="-1">1 索引 <a class="header-anchor" href="#_1-索引" aria-label="Permalink to &quot;1 索引&quot;">​</a></h2><h3 id="_1-1-为什么-innodb-存储引擎选择使用-b-树索引结构" tabindex="-1">1.1 为什么 InnoDB 存储引擎选择使用 B+ 树索引结构？ <a class="header-anchor" href="#_1-1-为什么-innodb-存储引擎选择使用-b-树索引结构" aria-label="Permalink to &quot;1.1 为什么 InnoDB 存储引擎选择使用 B+ 树索引结构？&quot;">​</a></h3><ul><li>相对于二叉树，层级更少，搜索效率更高</li><li>相对于 B 树，B 树无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，同样要保存大量的数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+ 树支持范围匹配及排序操作</li></ul><h3 id="_1-2-以下-sql-语句-哪个执行效率更高-为什么" tabindex="-1">1.2 以下 SQL 语句，哪个执行效率更高？为什么？ <a class="header-anchor" href="#_1-2-以下-sql-语句-哪个执行效率更高-为什么" aria-label="Permalink to &quot;1.2 以下 SQL 语句，哪个执行效率更高？为什么？&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- tb_user 的 id 为主键，并且为 name 创建了索引</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `tb_user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `tb_user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Howard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>通过 <code>id</code> 更快，因为通过 <code>name</code> 需要回表查询。</p>',7)]))}const y=i(n,[["render",l]]);export{c as __pageData,y as default};
