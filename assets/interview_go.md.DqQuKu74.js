import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.BZemHgQ6.js";const E=JSON.parse('{"title":"Go 面试题","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"interview/go.md","filePath":"interview/go.md"}'),t={name:"interview/go.md"};function h(e,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="go-面试题" tabindex="-1">Go 面试题 <a class="header-anchor" href="#go-面试题" aria-label="Permalink to &quot;Go 面试题&quot;">​</a></h1><h2 id="_1-基础篇" tabindex="-1">1 基础篇 <a class="header-anchor" href="#_1-基础篇" aria-label="Permalink to &quot;1 基础篇&quot;">​</a></h2><h3 id="_1-1-go包管理的方式有哪些" tabindex="-1">1.1 Go包管理的方式有哪些 <a class="header-anchor" href="#_1-1-go包管理的方式有哪些" aria-label="Permalink to &quot;1.1 Go包管理的方式有哪些&quot;">​</a></h3><p>发展历史：</p><ul><li><code>&lt; Go1.5</code>：GOPATH <ul><li>通过统一包存放的路径实现包管理</li><li>不支持依赖包的版本控制</li></ul></li><li><code>&gt;= Go1.5</code>：GO Vendor <ul><li>Go1.5 引入，需要通过环境变量 <code>GO15VENDOREXPERIMENT=1</code> 开启</li><li>Go1.6 Vendor 机制默认开启</li><li>把源码拷贝到 <code>vendor</code> 目录并维护 <code>vendor.json</code> 文件，指定版本</li></ul></li><li><code>&gt;= Go1.11</code>：GO Modules <ul><li>Go1.11 中，<code>GO111MODULE</code> 的默认值是 <code>auto</code>： <ul><li>当项目在 GOPATH 之外，且包含 <code>go.mod</code> 文件时，自动启用 Modules；</li><li>当项目在 GOPATH 内时，默认不启用（仍使用 GOPATH 模式）。</li></ul></li><li>Go1.13 起，<code>GO111MODULE</code> 默认值改为 <code>on</code>，彻底以 Modules 为主要包管理方式。</li></ul></li></ul><h3 id="_1-2-init-是什么时候执行的" tabindex="-1">1.2 <code>init()</code> 是什么时候执行的 <a class="header-anchor" href="#_1-2-init-是什么时候执行的" aria-label="Permalink to &quot;1.2 \`init()\` 是什么时候执行的&quot;">​</a></h3><p><code>init()</code> 函数的作用：</p><ul><li>程序执行前包的初始化</li></ul><p><code>init()</code> 函数的执行顺序：</p><ul><li>在同一个 Go 文件中的多个 init 方法，按照代码顺序依次执行</li><li>同一个包内不同文件中的 <code>init()</code> 函数，按照文件名顺序执行</li><li>不同的包且不相互依赖，按照 <code>import</code> 顺序执行</li><li>存在依赖关系的包，被依赖的包先执行 <code>init()</code></li></ul><p>go 文件的初始化顺序：</p><ol><li>引入的包</li><li>当前包中的常量</li><li>当前包中的变量</li><li>当前包的 <code>init()</code> 函数</li><li>若为 <code>main</code> 包，最终执行 <code>main()</code> 函数</li></ol><h3 id="_1-3-new-和-make-的区别" tabindex="-1">1.3 <code>new</code> 和 <code>make</code> 的区别 <a class="header-anchor" href="#_1-3-new-和-make-的区别" aria-label="Permalink to &quot;1.3 \`new\` 和 \`make\` 的区别&quot;">​</a></h3><ul><li><code>make</code> 不仅分配内存，还会初始化。<code>new</code> 只会分配零值填充的值（例如，<code>int</code> 的零值是 <code>0</code>，<code>*int</code> 的零值是 <code>nil</code>，<code>[]int</code> 的零值是 <code>nil</code>）</li><li><code>make</code> 只适用于 <code>slice</code>、<code>map</code>、<code>channel</code> 的数据，<code>new</code> 没有限制</li><li><code>make</code> 返回原始类型(T)，<code>new</code> 返回类型的指针(*T)</li></ul><h3 id="_1-4-内存逃逸" tabindex="-1">1.4 内存逃逸 <a class="header-anchor" href="#_1-4-内存逃逸" aria-label="Permalink to &quot;1.4 内存逃逸&quot;">​</a></h3><h4 id="_1-4-1-什么是内存逃逸" tabindex="-1">1.4.1 什么是内存逃逸 <a class="header-anchor" href="#_1-4-1-什么是内存逃逸" aria-label="Permalink to &quot;1.4.1 什么是内存逃逸&quot;">​</a></h4><p>Go 中，函数内的局部变量默认分配在栈上（栈内存由编译器自动分配和释放，效率极高）。但在某些情况下，变量会被移动到堆上分配，这种现象称为<strong>内存逃逸</strong>。逃逸分析是编译器决定变量分配位置的过程。</p><p>核心区别：</p><ul><li>栈分配：函数退出后，栈内存自动释放，无需垃圾回收（GC）。</li><li>堆分配：变量生命周期不确定，需由 GC 管理，会增加 GC 压力。</li></ul><h4 id="_1-4-2-发生内存逃逸的常见场景" tabindex="-1">1.4.2 发生内存逃逸的常见场景 <a class="header-anchor" href="#_1-4-2-发生内存逃逸的常见场景" aria-label="Permalink to &quot;1.4.2 发生内存逃逸的常见场景&quot;">​</a></h4><p>编译器进行逃逸分析时，若发现变量的生命周期无法在编译期确定或栈无法容纳，就会将其分配到堆上。常见场景包括：</p><ol><li><strong>变量被外部引用（跨函数生命周期）</strong></li></ol><p>若函数返回变量的指针或引用，且该指针被外部持有（变量需在函数退出后继续存在），变量会逃逸到堆。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // x 会逃逸到堆</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回指针，x 需在函数外存活</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><em>原因：函数退出后，栈会被销毁，若变量仍被外部引用，必须放在堆上。</em></p><ol start="2"><li><strong>变量大小超过栈的承载能力</strong></li></ol><p>栈的空间有限，若变量体积过大（如超大数组），编译器会将其分配到堆上。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bigData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 大小超过栈限制，逃逸到堆</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><em>原因：避免栈溢出（stack overflow），堆的空间更大且动态分配。</em></p><ol start="3"><li><strong>闭包引用并修改外部变量</strong></li></ol><p>闭包会捕获外部变量的引用，若闭包的生命周期长于变量的原始作用域，变量会逃逸到堆。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> closure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 闭包修改 x，x 需在 closure 退出后存活</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> closure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用闭包时，x 仍需存在</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><em>原因：闭包可能在函数退出后被调用，变量需脱离原函数栈存活。</em></p><ol start="4"><li><strong>变量类型为接口（动态类型不确定）</strong></li></ol><p>当变量被赋值给接口类型，且编译器无法在编译期确定其具体类型（动态类型），变量会逃逸到堆。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 声明的同时赋值了，不会发生逃逸</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a1 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	a1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 接口类型声明时没赋值，动态类型不确定，发生内存逃逸</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a2 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">animal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	a2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	a2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><em>原因：接口的动态类型处理需要 runtime 支持，堆分配更灵活。</em></p><ol start="5"><li><strong>切片 / 映射的动态扩容或长度不确定</strong></li></ol><p>若切片的长度是动态计算的（非编译期常量），或可能发生扩容（底层数组需更换），其底层数组可能逃逸到堆。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	n, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strconv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Atoi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.Args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,40)]))}const c=i(t,[["render",h]]);export{E as __pageData,c as default};
