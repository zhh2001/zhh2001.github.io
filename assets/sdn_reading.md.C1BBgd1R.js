import{_ as r,c as o,o as a,ag as n}from"./chunks/framework.BZemHgQ6.js";const i="/reading/IPro/KDN_architecture.png",e="/reading/IPro/Test_environment.png",d="/reading/IPro/CCO_variation.png",l="/reading/IPro/CUC_variation.png",h="/reading/IPro/MA_of_throughput.png",s="/reading/IPro/Behavior_of_the_CCO,_CUC,_MA,_and_Probing_Interval.png",b=JSON.parse('{"title":"文献阅读","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"sdn/reading.md","filePath":"sdn/reading.md"}'),g={name:"sdn/reading.md"};function P(p,t,C,c,_,m){return a(),o("div",null,t[0]||(t[0]=[n('<h1 id="文献阅读" tabindex="-1">文献阅读 <a class="header-anchor" href="#文献阅读" aria-label="Permalink to &quot;文献阅读&quot;">​</a></h1><h2 id="ipro-an-approach-for-intelligent-sdn-monitoring" tabindex="-1">IPro: An approach for intelligent SDN monitoring <a class="header-anchor" href="#ipro-an-approach-for-intelligent-sdn-monitoring" aria-label="Permalink to &quot;IPro: An approach for intelligent SDN monitoring&quot;">​</a></h2><h3 id="研究背景" tabindex="-1">研究背景 <a class="header-anchor" href="#研究背景" aria-label="Permalink to &quot;研究背景&quot;">​</a></h3><ol><li><strong>研究问题:</strong> 这篇文章要解决的问题是如何在 SDN 中进行智能流量监控，以保持控制通道开销（CCO，Control Channel Overhead）和控制器额外 CPU 使用率（CUC，CPU Usage of the Controller）在可接受范围内，同时保持较高的监控准确性（MA，Monitoring Accuracy）。</li><li><strong>研究难点:</strong> 该问题的研究难点包括：如何在探测间隔和监控准确性之间找到平衡；如何通过智能机制（如机器学习）来优化这种平衡，以适应网络行为的变化。</li><li><strong>相关工作:</strong> 相关工作包括基于推式和拉式的流量监控方法，但这些方法存在一些缺点，如高控制通道开销、高控制器 CPU 使用率、灵活性和可扩展性差等。已有的研究尝试通过自适应技术、通配符、阈值方法等来减少控制通道开销，但这些方法往往以牺牲监控准确性为代价。</li></ol><h3 id="研究方法" tabindex="-1">研究方法 <a class="header-anchor" href="#研究方法" aria-label="Permalink to &quot;研究方法&quot;">​</a></h3><p>这篇论文提出了一个名为 IPro 的智能 SDN 监控方法，用于解决上述问题。具体来说，IPro 包括以下几个方面：</p><ol><li>知识定义网络（KDN，Knowledge-Defined Networking）架构: IPro 基于 KDN 范式，利用机器学习技术来优化 SDN 的监控过程。KDN 架构包括控制平面（CP）、数据平面（DP）、管理平面（MP，Management Plane）和知识平面（KP，Knowledge Plane）。KP 利用 ML 技术从网络中提取有用知识，并做出决策。</li></ol><p align="center"><img width="70%" src="'+i+'" alt="KDN architecture"></p><ol start="2"><li><p><strong>强化学习（RL）算法:</strong> IPro 使用基于强化学习的算法来确定探测间隔。RL 算法通过与环境的交互学习最优策略，以最小化 CCO 和 CUC，同时保持较高的 MA。RL 算法的核心是 Q-learning，其目标是通过最大化累积奖励来确定最优动作策略。</p></li><li><p><strong>IPro 原型:</strong> 论文还提出了一个 IPro 原型，用于实现所提出的架构和算法。该原型包括以下几个主要组件：</p><ul><li>知识平面（KP）: 负责学习和决策。</li><li>控制平面（CP）: 负责收集和处理流量统计信息。</li><li>管理平面（MP）: 负责提取和分析网络状态信息。</li><li>数据平面（DP）: 负责转发数据包。</li></ul></li></ol><h3 id="实验设计" tabindex="-1">实验设计 <a class="header-anchor" href="#实验设计" aria-label="Permalink to &quot;实验设计&quot;">​</a></h3><p>为了评估 IPro 的性能，论文设计了一个实验环境，具体如下：</p><ol><li><strong>测试环境:</strong> 实验在一个校园网络拓扑上进行，包括 11 个 OpenFlow 交换机、230 个主机和一个 Web 服务器及文件服务器。实验使用了 Mininet 仿真器和 Ryu 控制器。</li></ol><p align="center"><img width="85%" src="'+e+'" alt="Test environment"></p><ol start="2"><li><strong>数据收集:</strong> 实验生成了视频和 Web 流量，分别占 75% 和 25%。使用 VLC 媒体播放器和 Apache 服务器生成流量，并通过 http-clients 进行请求。</li><li><strong>样本选择:</strong> 实验手动测试了不同的探测间隔（1 到 15 秒），并对每种间隔进行了 600 秒的测试。实验结果具有 95% 以上的置信水平。</li><li><strong>参数配置:</strong> 实验中使用了 Q-learning 算法，并设置了学习因子 α、折扣因子 γ 和探索参数 ε。通过调整这些参数来优化探测间隔。</li></ol><h3 id="结果与分析" tabindex="-1">结果与分析 <a class="header-anchor" href="#结果与分析" aria-label="Permalink to &quot;结果与分析&quot;">​</a></h3><p>实验结果表明，IPro 在控制通道开销（CCO）、控制器额外 CPU 使用率（CUC）和监控准确性（MA）方面表现出色：</p><ol><li><strong>控制通道开销（CCO）:</strong> IPro 的 CCO 保持在 1.23% 以下，显著低于周期性探测方法（PPA，Periodic Probing Approach）的 17.40%。</li></ol><p align="center"><img width="90%" src="'+d+'" alt="CCO variation"></p><ol start="2"><li><strong>控制器额外CPU使用率（CUC）:</strong> IPro 的 CUC 保持在 7.4% 以下，而 PPA 的 CUC 高达 20.60%。</li></ol><p align="center"><img width="90%" src="'+l+'" alt="CCO variation"></p><ol start="3"><li><strong>监控准确性（MA）:</strong> IPro 的 MA 在吞吐量测量中达到 96.17%，显著高于 PPA 的 83.59%。</li></ol><p align="center"><img width="90%" src="'+h+'" alt="MA of throughput"></p><ol start="4"><li><strong>收敛时间:</strong> IPro 在学习过程中需要大约 238 秒的时间来收敛到最优策略。收敛后，CCO、CUC 和 MA 的变化趋于稳定。</li></ol><p align="center"><img width="90%" src="'+s+'" alt="Behavior of the CCO, CUC, MA, and Probing Interval"></p><ol start="5"><li><strong>收敛前对比：</strong></li></ol><table tabindex="0"><thead><tr><th>Probing Interval [s]</th><th>MA of Throughput [%]</th><th>MA of Delay [%]</th><th>CUC [%]</th><th>CCO [%]</th></tr></thead><tbody><tr><td>IPro</td><td>85.58</td><td>84.60</td><td>7.56</td><td>1.23</td></tr><tr><td>PPA with 4</td><td>87.05</td><td>85.30</td><td>22.32</td><td>17.40</td></tr><tr><td>PPA with 5</td><td>90.63</td><td>91.50</td><td>10.12</td><td>11.45</td></tr><tr><td>PPA with 6</td><td>89.44</td><td>86.02</td><td>11.08</td><td>11.33</td></tr></tbody></table><ol start="6"><li><strong>收敛后对比：</strong></li></ol><table tabindex="0"><thead><tr><th>Probing Interval [s]</th><th>MA of Throughput [%]</th><th>MA of Delay [%]</th><th>CUC [%]</th><th>CCO [%]</th></tr></thead><tbody><tr><td>IPro</td><td>96.17</td><td>94.78</td><td>7.40</td><td>1.23</td></tr><tr><td>PPA with 4</td><td>83.59</td><td>82.50</td><td>20.60</td><td>17.40</td></tr><tr><td>PPA with 5</td><td>91.38</td><td>89.50</td><td>11.70</td><td>11.45</td></tr><tr><td>PPA with 6</td><td>86.35</td><td>81.03</td><td>10.10</td><td>11.33</td></tr></tbody></table><h3 id="总体结论" tabindex="-1">总体结论 <a class="header-anchor" href="#总体结论" aria-label="Permalink to &quot;总体结论&quot;">​</a></h3><p>这篇论文提出了一个基于知识定义网络和强化学习的智能 SDN 监控方法 IPro。实验结果表明，IPro 能够在保持较高监控准确性的同时，有效控制控制通道开销和控制器额外 CPU 使用率。未来的工作将探索无模型方法和基于模型的方法（如深度强化学习）来进一步减少收敛时间，并在奖励函数中引入其他参数（如交换机的计算资源）来改进探测间隔的估计。</p>',30)]))}const A=r(g,[["render",P]]);export{b as __pageData,A as default};
