import{_ as s,o as i,c as a,R as n}from"./chunks/framework._QHn8SP1.js";const l="/assets/tcp.Fp7AL0Qq.webp",t="/assets/tcp3.bfds6BzQ.png",p="/assets/tcp4.dOH4z5DR.png",T=JSON.parse('{"title":"网络协议","description":"","frontmatter":{},"headers":[],"relativePath":"notes/protocol.md","filePath":"notes/protocol.md"}'),e={name:"notes/protocol.md"},h=n('<h1 id="网络协议" tabindex="-1">网络协议 <a class="header-anchor" href="#网络协议" aria-label="Permalink to &quot;网络协议&quot;">​</a></h1><p>数据传输过程：</p><ol><li>应用层对请求数据包做格式定义</li><li>传输层加端口号，确认应用程序</li><li>网络层加双方IP，确认网络位置</li><li>链路层加双方MAC地址，确认物理位置。将数据分组，形成数据帧并转发给目标主机。</li></ol><p>TCP：面向连接的可靠协议<br> UDP：面向无连接的协议</p><h2 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h2><p><img src="'+l+'" alt="TCP报文"></p><ul><li><code>seq</code>：数据序号，存储本报文段所发送数据的第一个字节的序号</li><li><code>ack</code>：确认序号，期望收到对方的下一个报文段的数据的第一个字节的序号</li><li><code>ACK</code>：确认标志位，当 <code>ACK=1</code> 时，确认序号才有效</li><li><code>SYN</code>：同步标志位，表示这个报文是一个连接请求还是一个连接接受的请求</li><li><code>FIN</code>：结束标志位，当 <code>FIN=1</code> 时，表示此报文段的发送端的数据已经发送完成，并且要求释放连接</li></ul><p>三次握手：</p><p><img src="'+t+'" alt="Alt text"></p><p>四次挥手： <img src="'+p+`" alt="Alt text"></p><p>问题：为什么TCP客户端最后发送释放确认报文后还要再等待2MSL？<br> 因为客户端无法确认TCP服务器是否收到了报文，如果TCP服务器没有收到就会重发连接释放的报文，则客户进程会再次发送确认报文。如果两倍MSL时间内都没有重新收到TCP服务器的连接释放报文，那么客户端推断确认报文已经被服务端成功接受，从而关闭连接。</p><h2 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h2><p>HTTP请求响应模型：</p><ol><li>建立TCP连接</li><li>客户端向服务器发送请求命令</li><li>客户端发送请求头信息</li><li>客户端发送空行，表示结束请求头信息的发送</li><li>服务器应答</li><li>服务器返回响应头信息</li><li>服务端向客户端发送数据</li><li>服务器关闭TCP连接</li></ol><p>如果客户端频繁发送HTTP请求，会导致TCP连接频繁的建立和关闭。因此在需要频繁发送HTTP请求时，请求头可以带上 <code>Connection: keep-alive</code> 保持持久连接。HTTP1.1版本之后默认都是持久连接。</p><p>HTTP的相关特性：</p><ol><li>HTTP是无状态的的协议。可以引入 Cookie 和 Session 技术管理状态。</li><li>HTTP使用 Cookie 来进行客户端的状态管理。服务器响应时通过添加头信息 <code>Set-Cookie: xxx</code> 通知客户端保存该 Cookie 信息，下次客户端发送请求时就会带上 Cookie 信息。</li><li>管线化访问。一个请求没有响应也能发送下一个请求，可以并行发送多个请求。</li></ol><p>请求报文：</p><div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 请求行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /notes/protocol.html HTTP/1.1   # 请求方式 资源路径 协议版本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 请求头</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html;q=0.9             # 可接受的数据类型</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gzip, deflate, br  # 可接受的压缩格式</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> en-US,en;q=0.9     # 可接受的语言</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep-alive              # 保持长连接</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:5173                # 服务器主机地址和端口号，默认 80</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Upgrade-Insecure-Requests</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1        # 让浏览器升级不安全请求，使用 https 请求</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">User-Agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Edg/120.0.0.0           # 用户代理</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 空行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 请求体，POST请求才有，GET没有</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username=zhh&amp;password=666</span></span></code></pre></div><p>响应报文：</p><div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 响应行/状态行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/1.1 200 OK                      # 协议版本 状态码 状态描述</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 响应头</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html              # 内容类型</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Wed, 03 Jan 2024 18:05:56 GMT  # 服务器响应时间</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep-alive               # 保持长连接</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 空行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 响应体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DOCTYPE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,21),k=[h];function o(d,c,r,g,E,y){return i(),a("div",null,k)}const F=s(e,[["render",o]]);export{T as __pageData,F as default};
