import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.BZemHgQ6.js";const F=JSON.parse('{"title":"Mininet","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"sdn/mininet.md","filePath":"sdn/mininet.md"}'),l={name:"sdn/mininet.md"};function t(p,s,e,k,d,r){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="mininet" tabindex="-1">Mininet <a class="header-anchor" href="#mininet" aria-label="Permalink to &quot;Mininet&quot;">​</a></h1><p>Mininet 是一种网络仿真工具，可以创建包含虚拟主机、交换机、控制器和链路的网络。Mininet 主机运行标准的 Linux 网络软件，其交换机支持 OpenFlow，实现高度灵活的定制路由和软件定义网络（SDN）。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>准备好 Ubuntu 或者 Debian 操作系统，然后获取 Mininet 的源码：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/mininet/mininet</span></span></code></pre></div><p>上述 <code>git</code> 命令将获取最新版本的 Mininet。如果想切换其他特定版本，可以明确检出该版本：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mininet</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 列出可用版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mininet-2.3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.3.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 希望安装的版本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span></code></pre></div><p>安装命令为：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet/util/install.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [选项]</span></span></code></pre></div><p><code>install.sh</code> 脚本的常用选项包括：</p><ul><li><code>-a</code>：安装所有内容，包括 Open vSwitch 等依赖项，以及 OpenFlow Wireshark 解码器和 POX 等附加工具。默认情况下，这些工具将安装在主目录中创建的文件夹内。</li><li><code>-nfv</code>：安装 Mininet、OpenFlow 参考交换机和 Open vSwitch。</li><li><code>-s mydir</code>：在其他选项之前使用此选项，将源码放置在指定目录 mydir 中，而不是放在主目录中。</li></ul><p>可以通过以下命令了解其他有用的选项（例如安装 OpenFlow Wireshark 解码器，如果安装的 Wireshark 版本中尚未包含该解码器）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span></code></pre></div><p>安装完成后，测试 Mininet 的基本功能：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --switch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ovsbr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pingall</span></span></code></pre></div><h2 id="入门" tabindex="-1">入门 <a class="header-anchor" href="#入门" aria-label="Permalink to &quot;入门&quot;">​</a></h2><h3 id="_1-mininet-日常使用" tabindex="-1">1 Mininet 日常使用 <a class="header-anchor" href="#_1-mininet-日常使用" aria-label="Permalink to &quot;1 Mininet 日常使用&quot;">​</a></h3><h4 id="_1-1-查看帮助信息" tabindex="-1">1.1 查看帮助信息 <a class="header-anchor" href="#_1-1-查看帮助信息" aria-label="Permalink to &quot;1.1 查看帮助信息&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span></code></pre></div><h4 id="_1-2-启动-wireshark" tabindex="-1">1.2 启动 Wireshark <a class="header-anchor" href="#_1-2-启动-wireshark" aria-label="Permalink to &quot;1.2 启动 Wireshark&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wireshark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre></div><h5 id="_1-2-1-如果未安装-wireshark-显示-找不到命令-错误" tabindex="-1">1.2.1 如果未安装 Wireshark（显示“找不到命令”错误） <a class="header-anchor" href="#_1-2-1-如果未安装-wireshark-显示-找不到命令-错误" aria-label="Permalink to &quot;1.2.1 如果未安装 Wireshark（显示“找不到命令”错误）&quot;">​</a></h5><p>如果没有安装 Wireshark 和 OpenFlow 插件，可以尝试使用 Mininet 的 <code>install.sh</code> 脚本来安装它们，如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/mininet/mininet</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 如果之前没有克隆</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet/util/install.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span></span></code></pre></div><h4 id="_1-3-与主机和交换机交互" tabindex="-1">1.3 与主机和交换机交互 <a class="header-anchor" href="#_1-3-与主机和交换机交互" aria-label="Permalink to &quot;1.3 与主机和交换机交互&quot;">​</a></h4><p>启动一个最小拓扑并进入 Mininet 客户端：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span></span></code></pre></div><p>默认拓扑是 <code>minimal</code> 拓扑，包括一个连接两个主机的 OpenFlow 内核交换机和一个 OpenFlow 参考控制器。此拓扑也可以在命令行中使用 <code>--topo=minimal</code> 来指定。Mininet 还提供其他现成的拓扑，可以查看 <code>mn -h</code> 输出中的 <code>--topo</code> 部分。</p><p>此时，虚拟机中运行着四个实体：2 个主机进程、1 个交换机进程、1 个基本控制器。</p><p>同时，会进入 Mininet 命令行。</p><p>在 Wireshark 窗口中，可以看到内核交换机连接到参考控制器。</p><p>显示 Mininet CLI 命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">help</span></span></code></pre></div><p>显示节点：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nodes</span></span></code></pre></div><p>显示链接：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">net</span></span></code></pre></div><p>转储所有节点的信息：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dump</span></span></code></pre></div><p>此时应该会看到列出的交换机和两个主机。</p><p>如果在 Mininet CLI 中输入的第一个字符串是主机、交换机或控制器的名称，则该命令将在该节点上执行。在主机进程上运行命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ifconfig</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><p>此时应该会看到主机的 <code>h1-eth0</code> 和回环（<code>lo</code>）接口。请注意，当在主系统中运行 <code>ifconfig</code> 时，无法看到此接口（<code>h1-eth0</code>），因为它是特定于主机进程的网络命名空间。</p><p>相反，交换机默认运行在根网络命名空间中，因此在“交换机”上运行命令与在常规终端中运行命令相同：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ifconfig</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><p>这将显示交换机接口以及虚拟机的外部连接（<code>eth0</code>）。</p><h4 id="_1-4-测试主机之间的连通性" tabindex="-1">1.4 测试主机之间的连通性 <a class="header-anchor" href="#_1-4-测试主机之间的连通性" aria-label="Permalink to &quot;1.4 测试主机之间的连通性&quot;">​</a></h4><p>验证是否可以从主机 <code>h1</code> ping 到主机 <code>h2</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ping</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> h2</span></span></code></pre></div><p>另一种更简便的测试方法是使用 Mininet CLI 内置的 <code>pingall</code> 命令，它会对所有节点成对 <code>ping</code> 测试：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pingall</span></span></code></pre></div><h4 id="_1-5-运行一个简单的-web-服务器和客户端" tabindex="-1">1.5 运行一个简单的 Web 服务器和客户端 <a class="header-anchor" href="#_1-5-运行一个简单的-web-服务器和客户端" aria-label="Permalink to &quot;1.5 运行一个简单的 Web 服务器和客户端&quot;">​</a></h4><p><code>ping</code> 并不是可以在主机上运行的唯一命令。Mininet 主机可以运行任何在底层 Linux 系统（或虚拟机）及其文件系统中可用的命令或应用程序，还可以输入 <code>bash</code> 命令，包括作业控制（<code>&amp;</code>、<code>jobs</code>、<code>kill</code> 等）。</p><p>接下来，尝试在 <code>h1</code> 上启动一个简单的 HTTP 服务器，从 <code>h2</code> 发起请求，然后关闭该 Web 服务器：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">h2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> h1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kill</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %python</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>对于 Python 3，HTTP 服务器命令是 <code>http.server</code>；对于 Python 2，它是 <code>SimpleHTTPServer</code>。请确保使用与运行的 Mininet 版本对应的正确命令。要确定 Mininet 使用的 Python 版本，可以输入以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sys.version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;3.12.3 (main, Sep 11 2024, 14:17:37) [GCC 13.2.0]&#39;</span></span></code></pre></div></div><p>退出 CLI：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exit</span></span></code></pre></div><h4 id="_1-6-清理环境" tabindex="-1">1.6 清理环境 <a class="header-anchor" href="#_1-6-清理环境" aria-label="Permalink to &quot;1.6 清理环境&quot;">​</a></h4><p>如果 Mininet 因某种原因崩溃，执行清理操作可能会解决问题：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span></span></code></pre></div><h3 id="_2-高级启动选项" tabindex="-1">2 高级启动选项 <a class="header-anchor" href="#_2-高级启动选项" aria-label="Permalink to &quot;2 高级启动选项&quot;">​</a></h3><h4 id="_2-1-回归测试" tabindex="-1">2.1 回归测试 <a class="header-anchor" href="#_2-1-回归测试" aria-label="Permalink to &quot;2.1 回归测试&quot;">​</a></h4><p>例如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pingpair</span></span></code></pre></div><p>此命令创建了一个最小拓扑，启动了 OpenFlow 参考控制器，运行了全对 ping 测试，然后销毁了拓扑和控制器。</p><p>另一个有用的测试是 <code>iperf</code>（大约需要 10 秒完成）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iperf</span></span></code></pre></div><p>此命令创建了相同的 Mininet，分别在一台主机上运行 iperf 服务器，在另一台主机上运行 iperf 客户端。</p><h4 id="_2-2-拓扑大小和类型" tabindex="-1">2.2 拓扑大小和类型 <a class="header-anchor" href="#_2-2-拓扑大小和类型" aria-label="Permalink to &quot;2.2 拓扑大小和类型&quot;">​</a></h4><p>默认拓扑是一个连接两个主机的单交换机。可以使用 <code>--topo</code> 更改为不同的拓扑，并为该拓扑的创建传递参数。例如，要验证一个交换机和三个主机之间的全对 ping 连通性：</p><p>运行回归测试：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pingall</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --topo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> single,3</span></span></code></pre></div><p>另一个示例是线性拓扑（每个交换机有一个主机，所有交换机连接成一条直线）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pingall</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --topo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linear,4</span></span></code></pre></div><h4 id="_2-3-链路参数" tabindex="-1">2.3 链路参数 <a class="header-anchor" href="#_2-3-链路参数" aria-label="Permalink to &quot;2.3 链路参数&quot;">​</a></h4><p>Mininet 2.0 允许设置链路参数，这些参数甚至可以通过命令行自动设置：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tc,bw=10,delay=10ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">iperf</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ping</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> h2</span></span></code></pre></div><p>如果每条链路的延迟为 10 毫秒，那么往返时间 (RTT) 应大约为 40 毫秒，因为 ICMP 请求经过两条链路（一个到交换机，一个到目标），ICMP 回复则经过返回的两条链路。</p><p>可以使用 Mininet 的 Python API 自定义每条链路。</p><h4 id="_2-4-详细信息" tabindex="-1">2.4 详细信息 <a class="header-anchor" href="#_2-4-详细信息" aria-label="Permalink to &quot;2.4 详细信息&quot;">​</a></h4><p>默认的详细程度是 <code>info</code>，它会在启动和清理过程中打印 Mininet 的操作。使用 <code>-v</code> 参数可以查看完整的 <code>debug</code> 输出：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exit</span></span></code></pre></div><p>这会打印出大量的详细信息。尝试使用 <code>output</code> 级别，它仅打印 CLI 输出，几乎没有其他信息：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exit</span></span></code></pre></div><p>在 CLI 之外，还可以使用其他详细程度级别，例如 warning，该级别用于回归测试中以隐藏不必要的功能输出。</p><h4 id="_2-5-自定义拓扑" tabindex="-1">2.5 自定义拓扑 <a class="header-anchor" href="#_2-5-自定义拓扑" aria-label="Permalink to &quot;2.5 自定义拓扑&quot;">​</a></h4><p>使用简单的 Python API 也可以轻松定义自定义拓扑。在如下示例中，两个交换机直接连接，每个交换机连接一个主机：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;自定义拓扑示例</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">两个直接连接的交换机，每个交换机连接一个主机：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   主机 --- 交换机 --- 交换机 --- 主机</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">添加一个包含键值对的 &#39;topos&#39; 字典来生成新定义的拓扑，</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">使得可以从命令行传入 &#39;--topo=mytopo&#39; 来调用该拓扑。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mininet.topo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Topo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyTopo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Topo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( self ):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 新增主机和交换机</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        leftHost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.addHost( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rightHost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.addHost( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        leftSwitch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.addSwitch( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rightSwitch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.addSwitch( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 增加链路</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.addLink( leftHost, leftSwitch )</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.addLink( leftSwitch, rightSwitch )</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.addLink( rightSwitch, rightHost )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">topos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mytopo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: MyTopo() ) }</span></span></code></pre></div><p>提供自定义 Mininet 文件时，可以向命令行添加新的拓扑、交换机类型和测试。例如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --custom</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./custom.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --topo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mytopo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pingall</span></span></code></pre></div><h4 id="_2-6-id-mac" tabindex="-1">2.6 ID = MAC <a class="header-anchor" href="#_2-6-id-mac" aria-label="Permalink to &quot;2.6 ID = MAC&quot;">​</a></h4><p>默认情况下，主机启动时会被随机分配 MAC 地址。这会增加调试难度，因为每次创建 Mininet 时，MAC 地址都会更改。</p><p><code>--mac</code> 选项可以将主机的 MAC 和 IP 地址设置为简短、唯一且易于读取的 ID。</p><p>不使用 <code>--mac</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ifconfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;h1-eth0  Link encap:Ethernet  HWaddr f6:9d:5a:7f:41:42</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          inet addr:10.0.0.1  Bcast:10.255.255.255  Mask:255.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          collisions:0 txqueuelen:1000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          RX bytes:392 (392.0 B)  TX bytes:392 (392.0 B)&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exit</span></span></code></pre></div><p>使用 <code>--mac</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mac</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ifconfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;h1-eth0  Link encap:Ethernet  HWaddr 00:00:00:00:00:01</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          inet addr:10.0.0.1  Bcast:10.255.255.255  Mask:255.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          collisions:0 txqueuelen:1000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exit</span></span></code></pre></div><h4 id="_2-7-其他交换机类型" tabindex="-1">2.7 其他交换机类型 <a class="header-anchor" href="#_2-7-其他交换机类型" aria-label="Permalink to &quot;2.7 其他交换机类型&quot;">​</a></h4><p>可以使用其他类型的交换机。例如，要运行用户空间交换机：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --switch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iperf</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>与之前使用内核交换机相比，此时 iperf 报告的 TCP 带宽要低得多。</p></div><p>如果进行 ping 测试，延迟明显增大，因为现在数据包必须经历内核到用户空间的转换。ping 时间也会更加不稳定，因为主机的用户空间进程可能会被操作系统调度进出。</p><p>另一种交换机类型是 Open vSwitch（OVS），它在 Mininet 虚拟机中已预装。iperf 报告的 TCP 带宽与 OpenFlow 内核模块相似，甚至可能更快：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --switch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ovsk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iperf</span></span></code></pre></div><h3 id="_3-mininet-cli-命令" tabindex="-1">3 Mininet CLI 命令 <a class="header-anchor" href="#_3-mininet-cli-命令" aria-label="Permalink to &quot;3 Mininet CLI 命令&quot;">​</a></h3><h4 id="_3-1-显示命令列表" tabindex="-1">3.1 显示命令列表 <a class="header-anchor" href="#_3-1-显示命令列表" aria-label="Permalink to &quot;3.1 显示命令列表&quot;">​</a></h4><p>要查看命令行界面（CLI）选项列表，先启动一个最小拓扑并保持其运行。构建 Mininet：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span></span></code></pre></div><p>显示命令列表：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">help</span></span></code></pre></div><h4 id="_3-2-python-解释器" tabindex="-1">3.2 Python 解释器 <a class="header-anchor" href="#_3-2-python-解释器" aria-label="Permalink to &quot;3.2 Python 解释器&quot;">​</a></h4><p>如果在 Mininet 命令行中第一个词是 <code>py</code>，则该命令将使用 Python 执行。每个主机、交换机和控制器都有一个关联的 Node 对象。</p><p>在 Mininet CLI 中运行：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;world&#39;</span></span></code></pre></div><p>打印可访问的局部变量：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> locals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>接下来，使用 <code>dir()</code> 函数查看节点的可用方法和属性：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>可以使用 <code>help()</code> 函数查看节点上可用方法的在线文档：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (按 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;q&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 退出阅读文档</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>还可以执行变量的方法：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> h1.IP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="_3-3-链路启用-禁用" tabindex="-1">3.3 链路启用/禁用 <a class="header-anchor" href="#_3-3-链路启用-禁用" aria-label="Permalink to &quot;3.3 链路启用/禁用&quot;">​</a></h4><p>禁用虚拟以太网对的两个部分：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> h1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span></code></pre></div><p>此时，会看到一个 OpenFlow 端口状态更改通知被生成。要重新启用链路：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> h1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><h4 id="_3-4-启动-xterm" tabindex="-1">3.4 启动 XTerm <a class="header-anchor" href="#_3-4-启动-xterm" aria-label="Permalink to &quot;3.4 启动 XTerm&quot;">​</a></h4><p>为 h1 和 h2 启动一个 xterm 终端窗口：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xterm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> h1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> h2</span></span></code></pre></div><h2 id="mininet自定义命令拓展实现" tabindex="-1">Mininet自定义命令拓展实现 <a class="header-anchor" href="#mininet自定义命令拓展实现" aria-label="Permalink to &quot;Mininet自定义命令拓展实现&quot;">​</a></h2><ol><li>修改 <code>mininet/net.py</code>，编写自定义的功能代码；</li><li>修改 <code>mininet/cli.py</code>，注册命令；</li><li>修改 <code>bin/mn</code>，加入到可执行文件中；</li><li>重新安装 MiniNet 核心文件：</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet/util/install.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span></span></code></pre></div><h2 id="增加网络性能测试命令" tabindex="-1">增加网络性能测试命令 <a class="header-anchor" href="#增加网络性能测试命令" aria-label="Permalink to &quot;增加网络性能测试命令&quot;">​</a></h2><h3 id="_1-mininet-net-py-中定义-iperfsingle-函数" tabindex="-1">1 <code>mininet/net.py</code> 中定义 <code>iperfSingle</code> 函数 <a class="header-anchor" href="#_1-mininet-net-py-中定义-iperfsingle-函数" aria-label="Permalink to &quot;1 \`mininet/net.py\` 中定义 \`iperfSingle\` 函数&quot;">​</a></h3><p>在两个主机间进行 <code>iperf udp</code> 测试，并在 server 端记录，实现该功能的 <code>iperfSingle</code> 函数写在 <code>Mininet</code> 类下，代码如下：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 原始代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iperf_single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, hosts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, udp_bw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10M&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, period</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hosts:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        assert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hosts) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client, server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hosts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.name[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.out&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*** iperf: testing bandwidth between </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        iperf_args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;iperf -u&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        bw_args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-b </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udp_bw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*** Start server&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        server.cmd(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iperf_args</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -s -i 1 &gt; ~/mn_log/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&amp;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*** Start client&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client.cmd(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iperf_args</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -t </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">period</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -c </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.IP()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bw_args</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &gt; ~/mn_log/client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&amp;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_2-mininet-net-py-中定义-iperfmulti-函数" tabindex="-1">2 <code>mininet/net.py</code> 中定义 <code>iperfMulti</code> 函数 <a class="header-anchor" href="#_2-mininet-net-py-中定义-iperfmulti-函数" aria-label="Permalink to &quot;2 \`mininet/net.py\` 中定义 \`iperfMulti\` 函数&quot;">​</a></h3><p>依次为每台主机随机选择另一台主机作为 <code>iperf</code> 的服务端，通过调用 <code>iperfSingle</code>，自身以客户端按照指定参数发送 UDP 流。</p><p>代码编写在 <code>iperfSingle</code> 之后：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mininet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 原始代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iperfSingle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, hosts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, udp_bw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10M&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, period</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 前面实现的方法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iperfMulti</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, bw, period</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hosts:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random.choice(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hosts)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.iperfSingle(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hosts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[client, server], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">udp_bw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bw, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">period</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">period)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            sleep(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sleep(period)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test has done&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_3-mininet-cli-py-中注册-iperfmulti-命令" tabindex="-1">3 <code>mininet/cli.py</code> 中注册 <code>iperfmulti</code> 命令 <a class="header-anchor" href="#_3-mininet-cli-py-中注册-iperfmulti-命令" aria-label="Permalink to &quot;3 \`mininet/cli.py\` 中注册 \`iperfmulti\` 命令&quot;">​</a></h3><p>解析用户输入命令，<code>net.py</code> 定义的 <code>iperf_multi</code> 函数需要在 <code>CLI</code> 类中注册成命令：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CLI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cmd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 原始代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_iperfmulti</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, line):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;Multi iperf UDP test between nodes&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line.split()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mn.iperfMulti(args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        elif</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mn.iperfMulti(args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            error(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;invalid number of args: iperfMulti udpBw period</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  &#39;udpBw examples:1M 120</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_4-bin-mn-中加入-iperf-multi-命令" tabindex="-1">4 <code>bin/mn</code> 中加入 <code>iperf-multi</code> 命令 <a class="header-anchor" href="#_4-bin-mn-中加入-iperf-multi-命令" aria-label="Permalink to &quot;4 \`bin/mn\` 中加入 \`iperf-multi\` 命令&quot;">​</a></h3><p>修改后的 <code>bin/mn</code> 部分代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TESTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;pingall&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;pingpair&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;iperf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;iperfudp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;iperfmulti&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # new</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ALTSPELLING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;pingall&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pingAll&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;pingpair&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pingPair&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;iperfudp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;iperfUdp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;iperfmulti&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;iperfMulti&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # new</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-重新编译-mininet" tabindex="-1">5 重新编译 <code>mininet</code> <a class="header-anchor" href="#_5-重新编译-mininet" aria-label="Permalink to &quot;5 重新编译 \`mininet\`&quot;">​</a></h3><p>重新编译安装 <code>mininet</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mininet/util/install.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>mininet</code> 的安装默认使用 Python2，可以修改 <code>util/install.sh</code> 文件，指定 Python 版本。</p></div><p>重新创建网络，输入 <code>iperf-m</code>，可用 <code>Tab</code> 键补全 <code>iperfmulti</code>，从而可使用 <code>iperfmulti</code> 进行随机流量测试。</p>`,153)]))}const c=i(l,[["render",t]]);export{F as __pageData,c as default};
